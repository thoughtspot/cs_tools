[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cs_tools"
dynamic = ["version"]
description = "Scale your ThoughtSpot adoption with tools created by the ThoughtSpot Solutions Consulting organization."
readme = "README.md"
requires-python = ">= 3.9.2"
license = {file = "LICENSE"}
authors = [
	{name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
	{name = "billdback-ts", email="bill.back@thoughtspot.com"},
	{name = "devinmcpherson-ts", email="devin.mcpherson@thoughtspot.com"},
	{name = "mishathoughtspot", email="misha.beek@thoughtspot.com"},
]
maintainers = [
    {name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
]
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # dependencies here are listed for cs_tools the library  (ie. import cs_tools)
    "aiosqlite",
    "click == 8.1.7",
    "thoughtspot-tml >= 2.4.2",
    "awesomeversion",
    "httpx >= 0.27.0",
    "pydantic >= 2.6.4",
    "pydantic-settings",
    "email-validator",
    "rich == 13.7.1",
    "sqlmodel >= 0.0.16",
    "tenacity",
    "toml",
    "packaging",
    # TODO: https://github.com/thoughtspot/thoughtspot_tml/issues/24
    "betterproto[compiler] == 2.0.0b6",
    # OS-specific
    "tzdata; platform_system == 'Windows'",
    # version specific
    "typing_extensions; python_version < '3.10.0'",
    "exceptiongroup; python_version < '3.11.0'",
    "strenum; python_version < '3.11.0'",
    "taskgroup; python_version < '3.11.0'",
    "snowflake-sqlalchemy>=1.7.4",
]

[project.urls]
homepage = "https://thoughtspot.github.io/cs_tools/"
repository = "https://github.com/thoughtspot/cs_tools"
bug_tracker = "https://github.com/thoughtspot/cs_tools/issues"
documentation = "https://thoughtspot.github.io/cs_tools/"

[project.scripts]
cs_tools = "cs_tools.cli.commands.main:run"
cstools = "cs_tools.cli.commands.main:run"

[project.optional-dependencies]
cli = [
    # PIN THESE DEPENDENCIES EXPLICITLY SO WE CAN ENSURE THEY WORK ACROSS ENVIRONMENTS

    # CLI
    "prompt_toolkit == 3.0.47",
    "typer == 0.12.0",
    "uv == 0.5.13",

    # TUI & WEB
    "textual[syntax] == 1.0.0",
    "textual-serve == 1.1.1",
]
dev = [
    # CS Tools CLI
    "cs_tools[cli]",

    # DEVELOPMENT
    "textual-dev >= 1.7.0",

    # CODE QUALITY
    "hatch",
    "pre-commit",
    "mypy",
    "ruff",

    # Testing
    "coverage[toml]",
    "pytest",
]
docs = [
    # CS Tools CLI
    "cs_tools[cli]",

    # USED FOR GENERATING SAFE FILENAMES
    "python-slugify[unidecode]",

    # MARKDOWN TO STATIC SITE GENERATOR
    "mkdocs-material",

    # PLUGINS FOR MKDOCS
    "mkdocs-redirects",
    "mkdocs-open-in-new-tab",
]

[tool.hatch.envs.default.scripts]
# https://hatch.pypa.io/latest/how-to/environment/select-installer/#enabling-uv
installer = "uv"

[tool.hatch.version]
path = "cs_tools/__project__.py"

[tool.hatch.envs.dev.scripts]
setup = [
    "pre-commit install",
    "mypy --install-types --non-interactive",
    "uv run python {root:}/cs_tools/updater/_bootstrapper.py --dev --reinstall"
]
test = [
    "pytest"
]
lint = [
    "ruff check --config pyproject.toml",
    "ruff format --config pyproject.toml",
]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve"


[tool.mypy]
plugins = ["pydantic.mypy"]
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
strict_equality = true
strict_concatenate = true

[tool.ruff]
target-version = "py39"
line-length = 120
src = ["cs_tools", "tests"]
exclude = [
    "__pycache__",   # ignore compiled bytecode
    ".venv*",        # ignore virtual environments

    # project specific ignores
    "__init__.py",       # ignore __init__.py
    "__project__.py",    # ignore project metadata
    "_compat.py",        # ignore compatibles
    "_version.py",       # ignore _version.py
    "_bootstrapper.py",  # ignore bootstrapper
    "const.py",          # ignore const.py
]

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins: https://pypi.org/project/flake8-builtins/
    "ARG",   # flake8-unused-arguments: https://pypi.org/project/flake8-unused-arguments/
    "B",     # flake8-bugbear: https://pypi.org/project/flake8-bugbear/
    "C4",    # flake8-comprehensions: https://pypi.org/project/flake8-comprehensions/
    "COM",   # flake8-commas: https://pypi.org/project/flake8-commas/
    "DTZ",   # flake8-datetimez: https://pypi.org/project/flake8-datetimez/
    "E",     # pycodestyle: https://pypi.org/project/pycodestyle/
    "F",     # pyflakes: https://pypi.org/project/pyflakes/
    "FA",    # flake8-future-annotations: https://pypi.org/project/flake8-future-annotations/
    "I",     # isort: https://pypi.org/project/isort/
    "Q",     # flake8-quotes: https://pypi.org/project/flake8-quotes/
    "RUF",   # ruff-specific: https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
    "T20",   # flake8-print: https://pypi.org/project/flake8-print/
    "TCH",   # flake8-type-checking: https://pypi.org/project/flake8-type-checking/
]
ignore = [
    "A002",   # Function argument `<variable>` is shadowing a Python builtin
    "B008",   # Checks for function calls in default function arguments.
    "COM812", # Checks for the absence of trailing commas.
    "TC001",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
    "TC002",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
    "TC003",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
]

[tool.ruff.lint.flake8-import-conventions.aliases]
datetime = "dt"
sqlalchemy = "sa"
sqlmodel = "sm"

# [tool.ruff.lint.flake8-type-checking]
# runtime-evaluated-base-classes = [
#     "cs_tools.datastructures._GlobalModel",
#     "cs_tools.datastructures._GlobalSettings",
#     "cs_tools.datastructures.ValidatedSQLModel",
#     "typer.params.Option",
#     "typer.params.Argument",
#     "pydantic.BaseModel",
#     "pydantic_settings.BaseSettings",
#     "sqlalchemy.orm.DeclarativeBase",
#     "sqlmodel.SQLModel",
# ]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
from-first = true
required-imports = ["from __future__ import annotations"]